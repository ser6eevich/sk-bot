import { Request, Response } from 'express';
import { UploadedFile } from 'express-fileupload';
import { ExcelService, ColumnConfig } from '../services/ExcelService';
import { DatabaseService } from '../services/DatabaseService';
import path from 'path';
import fs from 'fs';
import { Bot } from 'grammy';

export class ExcelController {
	private excelService: ExcelService;
	private dbService: DatabaseService;
	private bot: Bot | null;

	constructor(bot: Bot | null) {
		this.excelService = new ExcelService();
		this.dbService = new DatabaseService();
		this.bot = bot;
	}

	public async processReport(req: Request, res: Response) {
		try {
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
			if (!req.file) {
				return res.status(400).json({ error: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª' });
			}

			const file = req.file;

			// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
			console.log('Processing file:', {
				originalname: file.originalname,
				size: file.size,
				mimetype: file.mimetype,
			});

			// –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
			let config: ColumnConfig | undefined = undefined;
			if (req.body && req.body.config) {
				try {
					config = JSON.parse(req.body.config);
				} catch (e) {
					console.error('Error parsing config:', e);
				}
			}

			const excelBuffer = await this.excelService.processReport(
				file.buffer,
				config
			);
			console.log('Processing completed successfully');

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
			const { telegramId: userId, saveReport } = req.body;
			console.log('Save report check:', { saveReport, userId, hasUserId: !!userId });
			let savedReport = null;
			
			// –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å telegramId
			if (userId) {
				try {
					// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					let user = await this.dbService.getUserByTelegramId(
						parseInt(userId)
					);
					if (!user) {
						user = await this.dbService.createUser({
							telegramId: parseInt(userId),
						});
					}

					// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
					const fileName = `processed_${Date.now()}_${file.originalname}`;
					const filePath = path.join(__dirname, '../../data/reports', fileName);

					// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
					const reportsDir = path.dirname(filePath);
					if (!fs.existsSync(reportsDir)) {
						fs.mkdirSync(reportsDir, { recursive: true });
					}

					fs.writeFileSync(filePath, excelBuffer);

					// –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON
					const processedData = await this.excelService.getProcessedData(
						file.buffer,
						config
					);

					// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
					savedReport = await this.dbService.createReport({
						userId: user.id,
						title: `–û—Ç—á–µ—Ç: ${file.originalname}`,
						fileName: fileName,
						filePath: filePath,
						fileSize: excelBuffer.length,
						processedData: JSON.stringify(processedData),
						summary: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞ ${file.originalname}`,
					});

					console.log('[Controller] –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', {
						reportId: savedReport.id,
						userId: user.id,
						fileName: fileName
					});
				} catch (dbError) {
					console.error('[Controller] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:', dbError);
					// –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
				}
			}

			// Set headers for file download
			res.setHeader(
				'Content-Type',
				'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
			);
			res.setHeader(
				'Content-Disposition',
				'attachment; filename=processed_report.xlsx'
			);
			res.setHeader('Content-Length', excelBuffer.length);

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
			const { telegramId, sendToBot } = req.body;
			console.log('Bot sending check:', { sendToBot, telegramId, hasBot: !!this.bot });
			
			if (sendToBot === 'true' && telegramId && this.bot) {
				try {
					// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π
					let fileToSend: string;
					
					if (savedReport && savedReport.filePath && fs.existsSync(savedReport.filePath)) {
						fileToSend = savedReport.filePath;
						console.log('Using saved file:', fileToSend);
					} else {
						// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
						const tempFileName = `temp_report_${Date.now()}.xlsx`;
						const tempFilePath = path.join(__dirname, '../../temp', tempFileName);
						
						// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
						const tempDir = path.dirname(tempFilePath);
						if (!fs.existsSync(tempDir)) {
							fs.mkdirSync(tempDir, { recursive: true });
						}
						
						// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
						fs.writeFileSync(tempFilePath, excelBuffer);
						fileToSend = tempFilePath;
						console.log('Using temp file:', fileToSend);
					}
					
					console.log('Sending document to Telegram user:', telegramId);
					
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –±–æ—Ç–∞
					await this.bot.api.sendDocument(parseInt(telegramId), fileToSend, {
						caption: 'üìä –í–∞—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!'
					});
					
					// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
					if (!savedReport || !savedReport.filePath) {
						fs.unlinkSync(fileToSend);
					}
					
					console.log('‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', telegramId);
					
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
					res.json({ 
						success: true, 
						message: '–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!',
						sentViaBot: true 
					});
					return;
				} catch (botError) {
					console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞:', botError);
					// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
				}
			} else {
				console.log('Bot sending conditions not met:', { 
					sendToBot, 
					telegramId, 
					hasBot: !!this.bot 
				});
			}

			// Send file (–æ–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)
			res.send(excelBuffer);
		} catch (error) {
			console.error('Error processing report:', error);

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			const errorMessage =
				error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
			res.status(400).json({
				error: errorMessage,
			});
		}
	}

	public async getAvailableColumns(req: Request, res: Response) {
		try {
			if (!req.file) {
				return res.status(400).json({ error: 'No file uploaded' });
			}

			const file = req.file;

			const columns = this.excelService.getAllAvailableColumns(file.buffer);
			res.json({ columns });
		} catch (error) {
			console.error('Error getting columns:', error);
			const errorMessage = error instanceof Error ? error.message : 'Failed to get columns';
			res.status(500).json({ error: errorMessage });
		}
	}
}
