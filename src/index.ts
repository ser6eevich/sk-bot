// Load environment variables FIRST
import dotenv from 'dotenv';
dotenv.config();

import { Bot } from 'grammy';
import express from 'express';
import path from 'path';
import https from 'https';
import fs from 'fs';
import excelRoutes from './routes/excel';
import calculatorRoutes from './routes/calculator';
import imageAnalysisRoutes from './routes/imageAnalysis';
import profileRoutes from './routes/profile';
import telegramRoutes from './routes/telegram';

// Initialize bot (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω)
let bot: Bot | null = null;
if (process.env.BOT_TOKEN) {
	bot = new Bot(process.env.BOT_TOKEN);
	console.log('‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
	console.log('Bot token length:', process.env.BOT_TOKEN.length);
} else {
	console.log('‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω');
	console.log('Available env vars:', Object.keys(process.env).filter(key => key.includes('BOT')));
}

// Initialize express app for web interface
const app = express();
const port = process.env.PORT || 3000;
const httpsPort = process.env.HTTPS_PORT || 3443;
const baseUrl = process.env.BASE_URL || 'https://localhost:3443';

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, '../public')));

// CORS –¥–ª—è Telegram WebApp
app.use((req, res, next) => {
	res.header('Access-Control-Allow-Origin', '*');
	res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
	res.header(
		'Access-Control-Allow-Headers',
		'Origin, X-Requested-With, Content-Type, Accept, Authorization'
	);
	if (req.method === 'OPTIONS') {
		res.sendStatus(200);
	} else {
		next();
	}
});

// Health check endpoint
app.get('/health', (req, res) => {
	res.json({ 
		status: 'ok', 
		timestamp: new Date().toISOString(),
		environment: process.env.NODE_ENV || 'development',
		port: process.env.PORT || 3000
	});
});

// Root endpoint
app.get('/', (req, res) => {
	res.json({ 
		message: 'SellKit Mini App API',
		status: 'running',
		timestamp: new Date().toISOString()
	});
});

// Routes
app.use('/api/excel', excelRoutes);
app.use('/api/calculator', calculatorRoutes);
app.use('/api/image-analysis', imageAnalysisRoutes);
app.use('/api/profile', profileRoutes);
app.use('/api/telegram', telegramRoutes);

// Error handling middleware
app.use(
	(
		err: any,
		req: express.Request,
		res: express.Response,
		next: express.NextFunction
	) => {
		console.error('Global error handler:', err);
		res.status(err.status || 500).json({
			error: err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
		});
	}
);

// Error handler
if (bot) {
	bot.catch(err => {
		console.error('Error in bot:', err);
	});

	// Bot command handlers
	bot.command('start', async ctx => {
	await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SellKit - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–µ–ª–ª–µ—Ä–æ–≤ –Ω–∞ WB!', {
		reply_markup: {
			keyboard: [
				[
					{
						text: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç',
						web_app: { url: `${baseUrl}/financial-report.html` },
					},
				],
				[
					{
						text: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ –ö–∏—Ç–∞—è',
						web_app: { url: `${baseUrl}/china-calculator.html` },
					},
				],
			],
			resize_keyboard: true,
		},
	});
	});

	// Message handlers
	bot.on('message:text', async ctx => {
	const text = ctx.message.text;

	switch (text) {
		case '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç':
			await ctx.reply(
				'–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –æ—Ç—á–µ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª.'
			);
			break;
		case '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ –ö–∏—Ç–∞—è':
			await ctx.reply(
				'–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n' +
					'1. –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä 1688\n' +
					'2. –°—Ç–æ–∏–º–æ—Å—Ç—å –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö\n' +
					'3. –í–µ—Å –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ –≤ –∫–≥\n' +
					'4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü\n' +
					'5. –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ –∫–≥'
			);
			break;
		default:
			await ctx.reply(
				'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.'
			);
	}
	});
}

// Start bot (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
if (bot) {
	bot.start();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ HTTPS —Å–µ—Ä–≤–µ—Ä–∞
function startHttpsServer() {
	try {
		const privateKey = fs.readFileSync(
			path.join(__dirname, '../ssl/private-key.pem'),
			'utf8'
		);
		const certificate = fs.readFileSync(
			path.join(__dirname, '../ssl/certificate.pem'),
			'utf8'
		);

		const credentials = { key: privateKey, cert: certificate };
		const httpsServer = https.createServer(credentials, app);

		httpsServer.listen(httpsPort, () => {
			console.log(
				`üîê HTTPS Server is running on https://localhost:${httpsPort}`
			);
			console.log(`üåê Mini App URL: ${baseUrl}`);
		});

		return httpsServer;
	} catch (error) {
		console.error(
			'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ HTTPS —Å–µ—Ä–≤–µ—Ä–∞:',
			error instanceof Error ? error.message : String(error)
		);
		console.log('üí° –°–æ–∑–¥–∞–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: node ssl/generate-certs.js');
		return null;
	}
}

// –ù–∞ Railway –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ HTTP —Å–µ—Ä–≤–µ—Ä
if (process.env.NODE_ENV === 'production') {
	// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç HTTPS
	app.listen(port, () => {
		console.log(`üöÄ Server is running on port ${port}`);
		console.log(`üåê Mini App URL: ${baseUrl}`);
	});
} else {
	// –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å HTTPS
	const httpsServer = startHttpsServer();
	if (!httpsServer) {
		app.listen(port, () => {
			console.log(`‚ö†Ô∏è  HTTP Server is running on http://localhost:${port}`);
			console.log(
				'üí° –î–ª—è Mini App –Ω—É–∂–µ–Ω HTTPS! –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: node ssl/generate-certs.js'
			);
		});
	}
}
