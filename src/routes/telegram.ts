import express from 'express';
import { DatabaseService } from '../services/DatabaseService';
import { Bot } from 'grammy';
import fs from 'fs';

const router = express.Router();
const db = new DatabaseService();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–∞
function getBot(): Bot | null {
	if (process.env.BOT_TOKEN) {
		return new Bot(process.env.BOT_TOKEN);
	}
	return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData
function parseInitData(initData: string) {
	if (!initData) {
		throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
	}
	
	try {
		// –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
		return JSON.parse(decodeURIComponent(initData));
	} catch (parseError) {
		// –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å user_id –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
		const urlParams = new URLSearchParams(initData);
		const userParam = urlParams.get('user');
		if (userParam) {
			return JSON.parse(userParam);
		} else {
			throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
		}
	}
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö Telegram
function validateTelegramData(
	req: express.Request,
	res: express.Response,
	next: express.NextFunction
) {
	const initData = req.headers['x-telegram-init-data'] as string;

	if (!initData) {
		return res
			.status(401)
			.json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram' });
	}

	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
	// –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
	next();
}

// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/user', validateTelegramData, async (req, res) => {
	try {
		const initData = req.headers['x-telegram-init-data'] as string;
		const userData = parseInitData(initData);

		if (!userData.user) {
			return res.status(400).json({ error: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
		}

		const telegramId = userData.user.id;

		// –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		let user = await db.getUserByTelegramId(telegramId);

		if (!user) {
			// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			user = await db.createUser({
				telegramId: telegramId,
				username: userData.user.username,
				firstName: userData.user.first_name,
				lastName: userData.user.last_name,
				avatarUrl: userData.user.photo_url,
			});
		} else {
			// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			await db.updateUser(telegramId, {
				username: userData.user.username,
				firstName: userData.user.first_name,
				lastName: userData.user.last_name,
				avatarUrl: userData.user.photo_url,
			});
		}

		res.json({
			success: true,
			user: user,
		});
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
		res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
	}
});

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
router.post('/data', validateTelegramData, async (req, res) => {
	try {
		const initData = req.headers['x-telegram-init-data'] as string;
		const userData = parseInitData(initData);
		const telegramId = userData.user.id;

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const user = await db.getUserByTelegramId(telegramId);
		if (!user) {
			return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
		const { type, data } = req.body;

		switch (type) {
			case 'analysis':
				const analysis = await db.createAnalysis({
					userId: user.id,
					...data,
				});
				res.json({ success: true, analysis });
				break;

			case 'report':
				const report = await db.createReport({
					userId: user.id,
					...data,
				});
				res.json({ success: true, report });
				break;

			default:
				res.status(400).json({ error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö' });
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
		res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
	}
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/stats', validateTelegramData, async (req, res) => {
	try {
		const initData = req.headers['x-telegram-init-data'] as string;
		const userData = parseInitData(initData);
		const telegramId = userData.user.id;

		const user = await db.getUserByTelegramId(telegramId);
		if (!user) {
			return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
		}

		const stats = await db.getUserStats(user.id);
		res.json({ success: true, stats });
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
		res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
	}
});

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Telegram
router.post('/send-report/:reportId', validateTelegramData, async (req, res) => {
	try {
		const initData = req.headers['x-telegram-init-data'] as string;
		const userData = parseInitData(initData);
		const telegramId = userData.user.id;
		const reportId = parseInt(req.params.reportId);

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const user = await db.getUserByTelegramId(telegramId);
		if (!user) {
			return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
		}

		// –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
		const report = await db.getReportById(reportId);
		if (!report || report.userId !== user.id) {
			return res.status(404).json({ error: '–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		if (!report.filePath || !fs.existsSync(report.filePath)) {
			return res.status(404).json({ error: '–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –±–æ—Ç–∞
		const bot = getBot();
		if (!bot) {
			return res.status(500).json({ error: '–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
		}

		try {
			await bot.api.sendDocument(telegramId, report.filePath, {
				caption: 'üìä –í–∞—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç'
			});
			
			res.json({ success: true, message: '–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram' });
		} catch (botError) {
			console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞:', botError);
			res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞' });
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:', error);
		res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
	}
});

export default router;
